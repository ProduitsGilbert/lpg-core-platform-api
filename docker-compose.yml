services:
  # Main API service (using existing SQL Server)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lpg-core-platform-api
    working_dir: /app
    command: ["/opt/venv/bin/python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "7003", "--log-level", "info"]
    ports:
      - "7003:7003"
    env_file:
      - .env
    environment:
      # Database configuration - POINT TO YOUR EXISTING SQL SERVER
      DB_DSN: ${DB_DSN:-mssql+pyodbc://username:password@your-sql-server-host:1433/YourDatabase?driver=ODBC+Driver+18+for+SQL+Server&TrustServerCertificate=yes}
      
      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      
      # ERP configuration
      ERP_MODE: ${ERP_MODE:-legacy}
      ERP_BASE_URL: ${ERP_BASE_URL:-}
      CANARY_PERCENT: ${CANARY_PERCENT:-0}
      
      # External services
      LOGFIRE_API_KEY: ${LOGFIRE_API_KEY:-}
      LOGFIRE_IGNORE_NO_PROJECT: "1"  # Disable Logfire auto-config when no API key
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-5-2025-08-07}
      LOCAL_AGENT_BASE_URL: ${LOCAL_AGENT_BASE_URL:-}
      OCR_SERVICE_URL: ${OCR_SERVICE_URL:-}
      
      # Feature flags
      ENABLE_SCHEDULER: ${ENABLE_SCHEDULER:-false}
      ENABLE_OCR: ${ENABLE_OCR:-false}
      ENABLE_AI_ASSISTANCE: ${ENABLE_AI_ASSISTANCE:-false}
    volumes:
      - ./logs:/app/logs
    networks:
      - lpg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7003/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Use host network mode if your SQL Server is on the host machine
    # network_mode: "host"  # Uncomment if SQL Server is on localhost

networks:
  lpg-network:
    driver: bridge
    name: lpg-network